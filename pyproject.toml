[project]
name = "gpx-stats"
description = "GPX processing and visualization"
version = "0.1.0"
authors = [
    {name = "Denise Ratasich", email = "dratasich@users.noreply.github.com"},
]
license = {text = "MIT"}
requires-python = "<4.0,>=3.11"

dependencies = [
    "gpxpy<2.0.0,>=1.4.2",
    "haversine<3.0.0,>=2.5.1",
    "pandas<3.0.0,>=2.2.0",
    "SQLAlchemy<3.0.0,>=2.0.36",
]

[project.optional-dependencies]
dashapp = [
    "dash<3.0.0,>=2.18.2",
]

[dependency-groups]
dev = [
    "mypy>=1.15.0",
    "pandas-stubs>=2.2.3.250308",
    "pre-commit>=4.2.0",
    "pytest>=8.3.5",
    "ruff<1.0.0,>=0.8.4",
]

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[tool.hatch.build.targets.wheel]
packages = ["stats_loader"]

# https://docs.astral.sh/ruff/configuration/
[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

# https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-imports
[[tool.mypy.overrides]]
module = ["haversine.*"]
follow_untyped_imports = true
